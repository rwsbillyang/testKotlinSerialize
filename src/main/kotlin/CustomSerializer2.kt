import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.serializer

import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.descriptors.element
import kotlinx.serialization.encodeToString
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.encodeStructure
import kotlinx.serialization.json.Json
import kotlinx.serialization.modules.*

@Serializable(with = Box8Serializer::class)
//@Serializable
open class Box8 { //if use sealed instead of open, same result
    var msg: String? = null
    var code: Int = 0
}

// if put properties of parent class in its constructor reports:
//Impossible to make this class serializable because its parent is not serializable and does not have exactly one constructor without parameters
@Serializable
class TheTextMsg(val content: String) : Box8()

fun testCustomSerializerAndInheritance() {
    val box = Box8()
    val textMsg = TheTextMsg("some content")
    val json = Json {
         // same result
//        serializersModule = SerializersModule {
//            polymorphic(Box8::class) {
//                subclass(TheTextMsg::class)
//            }
//        }
    }

    println(json.encodeToString(box))
    println(json.encodeToString(textMsg))

    // if parent class use serializer generated by plugin
    //{"msg":null,"code":0}
    //{"msg":null,"code":0,"content":"some content"}

    //if use custom serializer, output:
    //{"msg8":null,"msg8":0}
    //{"content":"some content"}
}


object Box8Serializer : KSerializer<Box8> {
    override val descriptor: SerialDescriptor =
            buildClassSerialDescriptor("box") {
                element<String?>("msg8", isOptional = true)
                element<Int?>("code8", isOptional = true)
            }

    @ExperimentalSerializationApi
    override fun serialize(encoder: Encoder, value: Box8) =
            encoder.encodeStructure(descriptor) {
                encodeNullableSerializableElement(descriptor, 0, String.serializer(), value.msg)
                encodeIntElement(descriptor, 0, value.code)
            }

    override fun deserialize(decoder: Decoder): Box8 {
        TODO("Not implement")
    }
}